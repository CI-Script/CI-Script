enum TokenType {
	COMMENT;   # For tokens that represent a comment
	KEYWORD;   # For tokens that represent a keyword
	OPERATOR;  # For tokens that represent an operator
	NUMBER;    # For tokens that represent a number literal
	STRING;    # For tokens that represent a character or string literal
	ESCAPE;    # For tokens that represent an escape sequence inside a literal
	TYPE;      # For identifiers that declare or reference a type
	PROPERTY;  # For identifiers that declare or reference a type property
	VARIABLE;  # For identifiers that declare or reference a variable
	FUNCTION;  # For identifiers that declare or reference a function
	PARAMETER; # For identifiers that declare or reference a function parameter
	INVALID;   # For identifiers that declare or reference a reserved name
}

enum TokenModifier {
	DEFINITION    = 0b1;         # For symbol definitions (`var variable;`)
	DECLARATION   = 0b01;        # For symbol declarations (`var variable = 0;`)
	MODIFICATION  = 0b001;       # For symbol modifications (`variable = 0;`)
	DOCUMENTATION = 0b0001;      # For symbol occurrences in block comments
	READONLY      = 0b0000_1;    # For variables and properties that are readonly (constants)
	MUTABLE       = 0b0000_01;   # For variables and properties that are mutable
	EXPORT        = 0b0000_001;  # For   symbols that are exported
	ASYNC         = 0b0000_0001; # For functions that are async
}

struct Token {
	type: TokenType;
	modifiers: TokenModifier = 0;
	position: u32;
}